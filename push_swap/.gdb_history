print moves->rb
n
print output
n
print output
n
print output
n
print aux
print aux
n
print aux
n
print min
n
fin
n
print aux
print i
q
br find_cheapest_element 
r
n
print aux
print i
print a->array[4]
print a->array[4 + a->start]
br calculate_moves 
r
c
print i
c
print i
c
print i
c
print i
n
print moves->rra
print a->size
print a->size/2
print a->size/2 - 
print a->size/2 - i
print a->size / 2 - i
print a->size / 2 
print a->size / 2 - i
i
print i
print (a->size) - i
print (a->size/2) - i
print abs((a->size/2) - i)
print abs((a->size) - i)
q
r
br calculate_moves 
r
print i
c
print i
c
print i
q
br calculate_moves 
r
print i
c
print i
c
print i
n
print output
n
print i
n
q
br make_move 
r
n
print element_index 
n
print element_index 
print a->array[a->start + element_index]
n
print a->array[a->start + element_index]
n
print a->array[a->start + element_index]
n
q
br put_elements 
r
fin
fin
c
fin
print (a->[array
print (b->array[b->start])
print (b->array[b->start + 1])
print (b->array[b->start + 2])
r
c
q
br main.c:35
r
print stack_a->size
print stack_b->size
n
print stack_a->size
print stack_b->array[stack_b->start]
info break
clean 1
clear 1
del 
del 1
info break
br apply_moves 
r
n
q
br apply_moves 
r
n
c
n
print a->array[0]
print a->array[a->start]
br calculate_moves 
r
c
print i
n
print a->array[i + a->start]
print b->array[b->start + j]
n
q
clear
br calculate_moves 
r
nn
n
!(a->array[a->start + i] > b->array[b->start + j] && a->array[a->start + i] > b->array[(b->start + j + 1) % b->size])
print !(a->array[a->start + i] > b->array[b->start + j] && a->array[a->start + i] > b->array[(b->start + j + 1) % b->size])
q
br calculate_moves 
r
n
print a->array[a->start + i]
print b->array[b->start + j +1]
print b->array[b->start + j +1 % b->size]
print b->array[b->start + j +1 % 2]
print b->array[b->start + (j +1) % 2]
makmake
q
br calculate_moves 
r
n
b->array[b->start + j]
n
q
br apply_moves 
r
n
n
c
print a->array[0]
print a->array[1]
print a->array[2]
print a->array[3]
print a->array[7]
print a->array[8]
n
print_stack(a)
print moves.rra
print a->array[a->start]
n
print a->array[a->start]
r
c
print moves.rra
n
n
q
br main.c:54
r
s
n
print i
c
s
print i
n
print moves->rra
print a->size
print i
n
print a->array[a->start + i]
print b->array[b->start + j]
print_stacl
print_stack()
n
pritn b->array[b->start]
print b->array[b->start]
print b->array[b->start + 1]
print b->array[b->start + 2]
print b->array[b->start + 3]
q
br main.c:59
r
br calculate_moves 
c
print i
print a->array[a->start +i]
n
print moves->ra
n
q
br main.c:59
r
br calculate_moves 
r
n
print i
print a->array[a->start]
c
print i
c
print i
c
print
c
print i
c
print i
print a->array[a->start]
n
print i
q
br main.c:54
r
s
print i
n
c
s
print i
print a->array[a->start + i]
n
print i
n
n
print b->array[b->start + j]
print (a->array[a->start + i]
print (a->array[a->start + i](
print (a->array[a->start + i])
print b->array[b->start + (j + 1) % b->size])
print b->array[b->start + (j + 1) % b->size]
q
